{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catgs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAIRC,mBAAS,IAJD,mBAIrCC,EAJqC,KAIzBC,EAJyB,KAwB5C,OAEI,0BAAMC,SAfW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAUd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCTlBG,EAAO,uCAAI,WAAMC,GAAN,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,gEAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CAEHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAkBbM,GAlBa,4CAAJ,sDCCPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEhC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAON,IACtB,2BAAIA,KCDFO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EAGZd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IANyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KA6BtC,OAhBAC,qBAAW,WAEPxB,EAAQC,GAAUwB,MACd,SAAAC,GAEQH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAOzB,CAACpB,IAEGqB,EDzB0BK,CAAa1B,GAAjCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAErB,OACI,oCACA,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAGEoB,GAAW,uBAAGJ,UAAU,qCAAb,WAEb,yBAAKA,UAAU,aAELH,EAAOJ,KAAK,SAAAC,GAAG,OAET,kBAAC,EAAD,eACGiB,IAAOjB,EAAIC,IACPD,UEnBlBkB,EAAe,WAAM,MAIM1C,mBAAS,CAAC,cAJhB,mBAIvB2C,EAJuB,KAIX5C,EAJW,KAoB9B,OACI,oCACA,4CAEA,kBAAC,EAAD,CAAcA,cAAeA,IAE7B,6BAGD,4BAES4C,EAAWpB,KAAK,SAAAT,GAAQ,OAEpB,kBAAC,EAAD,CACI2B,IAAO3B,EACPA,SAAWA,UClCnC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.8eef5100.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nexport const AddCategory = ({setCategories}) => {\n\n\n    // Estado del input\n    const [inputValue, setInputValue] = useState(''); // sin nada es undefined\n\n    // Ultimo valor que el usuario escribe\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e)=>{\n\n        e.preventDefault();\n\n        if ( inputValue.trim().length>2) {\n            setCategories(catgs => [inputValue,...catgs  ]);\n            setInputValue('');\n        }\n\n    }\n    \n\n\n    return (\n       \n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange = { handleInputChange }\n            />\n        </form>\n        \n    )\n}\n\nAddCategory.propTypes = {\n\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs =  async(category) => {\n    // encodeURI -> por. espacios a %20\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) } &limit=10&api_key=nWUqpRC2fdvoPjN7itZrjYvGJCF3fMZj`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        \n        return {\n\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url // ? por si no viene.\n    }\n        \n\n    });\n\n    return gifs;\n    \n}\n","import React from 'react'\n\nexport const GifGridItem = ( {title,url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n           <img src={url} alt = {title} />\n           <p>{title}</p>\n        </div>\n    )\n}\n","// Coleccion de elementos de la categoria\n\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category} ) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n    \n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n        {/*  operador ternario  */}\n        { loading && <p className=\" animate__animated animate__flash\">Loading</p> }\n\n        <div className=\"card-grid\">\n               {\n                  images.map( img => (\n                      \n                        <GifGridItem \n                           key = {img.id}\n                           {...img}\n\n                        />\n\n                  ))\n\n\n               }\n\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n// \nexport const useFetchGifs = (category) => {\n\n\n    const [state, setState] = useState({\n\n        data: [],\n        loading: true\n\n    });\n\n    // El use effect es solo para cuando cambie la categoria\n\n    // los efectos no pueden ser async\n    useEffect( () => {\n\n        getGifs(category).then(\n            imgs => {\n\n                    setState({\n                        data: imgs,\n                        loading:false //terminó de cargar\n    \n                    })\n                    \n                }\n        )\n\n    }, [category] ) //solo se disparará una única vez cuando se renderice el componente\n\n    return state; // {data:[], loading:true }\n\n}","import React, {useState} from 'react'\nimport {AddCategory} from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n    //const categories = ['One Puch',' Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['Sweet cat']);\n\n\n    // Agregar elemento al arreglo con setCategories\n    // const handleAdd = () => { \n\n    //     // esto no funciona porque categories es un arreglo\n    //     // setCategories('lalala');\n\n    //     // esto sí :) \n    //     setCategories( [...categories,'Spiderman']);\n\n    //     //otra opción\n    //     // setCategories( catsOld => [ ...catsOld,'Spiderman']);\n    // }\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n\n        <AddCategory  setCategories={setCategories}/>\n\n        <hr />\n\n        {/* <button onClick={handleAdd}>Agregar</button> */}\n       <ol>\n           {\n                categories.map( category  => (\n                    //   <li key= { category } >  { category } </li>\n                    <GifGrid \n                        key = {category}\n                        category={ category } />\n                ))\n           } \n       </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}